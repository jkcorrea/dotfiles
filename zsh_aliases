alias py='python -c "import IPython; IPython.terminal.ipapp.launch_new_instance()"'
alias gpl='git pull'
alias mks='make serve'
alias mkgs='./node_modules/.bin/gulp serve -u'

# Location aliases
alias dev='cd ~/dev'
alias kea='cd ~/dev/kea-magic-dhcpd'
alias ash='cd ~/dev/Asahi'
alias slash='cd ~/dev/Asahi/saltstack'
alias sl='cd ~/dev/Edge/saltstack'
alias fe='cd ~/dev/frontend'
alias wv='cd $GOPATH/src/gitlab.sd.apple.com/wonka/wonkavision'
alias cf='cd ~/dev/ChocolateFactory'
alias scs='cd ~/dev/atsconfig/secrets'
gocd () { cd `go list -f '{{.Dir}}' $1` }

# Misc aliases
function n {
  $(npm bin)/$@
}

# Kill all processes matching
kl () {
  kill `ps aux | grep "[${1:0:1}]${1:1}" | awk '{print $2}'`
}

# Python/Django related funcs
function _work() {
	reply=(`find . -maxdepth 1 -type d -name ".venv-*" | sed 's/\.\/\.venv\-//g'`)
}
# Start .venv/ virtualenv
function work() {
	if [ $VIRTUAL_ENV ]; then
		deactivate
	fi
	if [ -f bin/activate ]; then
		source bin/activate
	elif [ ! -z $2 ]; then
		source .venv-$1-$2/bin/activate
	elif [ ! -z $1 ]; then
		source .venv-$1/bin/activate
	elif [ -f .venv/bin/activate ]; then
		source .venv/bin/activate
	else
		echo "work: $fg[red]Error:$reset_color Could not find venv $1"
		echo "You currently have the following venvs"
		find . -maxdepth 1 -type d -name ".venv-*" | sed 's/\.\/\.venv\-//g'
	fi
}
compctl -K _work work
# Create a venv in cwd
function venv() {
    if [[ ! -z $1 && ($1 == "-h" || $1 == "--help") ]]; then
        echo "venv"
        echo "usage: venv <name> <python-version>"
        echo ""
        echo "Override python-version with PYTHON_VERSION environment variable"
        return 1
    fi
	if [[ ! -z $2 && -z $PYTHON_VERSION ]]; then
		PYTHON_VERSION=$2
	elif [[ -z $PYTHON_VERSION ]]; then
		PYTHON_VERSION="`python -c "import sys; print(sys.version.split('(')[0]).replace(' ', '').rsplit('.', 1)[0]"`"
	fi
	echo "Using python version ${PYTHON_VERSION}"
	VERSION_NAME="${fg[cyan]}Py${fg[yellow]}${PYTHON_VERSION}$reset_color"
	if [ ! -z $1 ]; then
		virtualenv --prompt "(${PWD##*/}-$1 | ${VERSION_NAME}) " --python=python$PYTHON_VERSION .venv-$1-$PYTHON_VERSION
	else
		virtualenv --prompt "(${PWD##*/} | ${VERSION_NAME}) " --python=python$PYTHON_VERSION .venv
	fi
}

function dj() {
	if [ -f bin/django ]; then
		bin/django $* # Buildout
	elif [ -f src/manage.py ]; then
		python src/manage.py # src/ folder
	elif [ -f project/manage.py ]; then
		python project/manage.py $* # django default
	elif [ -f manage.py ]; then
		python manage.py $* # plain
	else
		echo "dj: $fg[red]Error:$reset_color Could not find manage.py or buildout"
	fi
}

alias dr='dj runserver'

function rt() {
	if [ -f runtests.sh ]; then
		./runtests.sh $*
	elif [ -f runtests.py ]; then
		python runtests.py $*
	elif [ -f scripts/runtests.sh ]; then
		./scripts/runtests.sh $*
	else
		echo "dj: $fg[red]Error:$reset_color Could not find runtests.sh or runtests.py"
	fi
}

function req() {
	if [ -f requirements.txt ]; then
		pip install -r requirements.txt
	elif [ -f setup.py ]; then
		python setup.py develop
	else
		echo "dj: $fg[red]Error:$reset_color Could not find requirements.txt or setup.py"
	fi
}

alias bs="venv && work && req"
alias readlink=greadlink
